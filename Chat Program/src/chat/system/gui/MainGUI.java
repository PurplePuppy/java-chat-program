/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chat.system.gui;

import chat.system.objects.ChatConnection;
import chat.system.objects.ChatLog;
import chat.system.objects.ChatMessage;
import chat.system.objects.ChatPerson;
import chat.system.objects.ServerMessage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author jon
 */
public class MainGUI extends javax.swing.JFrame implements Observer {

    ChatConnection connection;
    // Log file of everything happening
    ChatLog log;
    // The list of people in the chat room
    ChatPersonList list;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() throws UnknownHostException, IOException {
        list = new ChatPersonList();
        log = new ChatLog(new FileOutputStream(new File("chat.log")));
        // Make the gui
        initComponents();
        // Connect to the server. Default is to connect to the local one we made during startup.
        initConnection();
        // Set up linewrap in the message typing area
        mainTextArea.setLineWrap(true);
        // Make it wrap by word, not be character
        mainTextArea.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        statusBarLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        quitMenuOption = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        changeUsernameMenuItem = new javax.swing.JMenuItem();
        changeServerMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

        messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageTextFieldKeyTyped(evt);
            }
        });

        mainTextArea.setEditable(false);
        mainTextArea.setColumns(20);
        mainTextArea.setRows(5);
        jScrollPane1.setViewportView(mainTextArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        statusBarLabel.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        statusBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        statusBarLabel.setText("Ready");

        jList1.setModel(list);
        jScrollPane2.setViewportView(jList1);

        fileMenu.setText("File");

        quitMenuOption.setText("Quit");
        quitMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuOptionActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuOption);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        changeUsernameMenuItem.setText("Change Username");
        changeUsernameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeUsernameMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(changeUsernameMenuItem);

        changeServerMenuItem.setText("Change Server");
        changeServerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeServerMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(changeServerMenuItem);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBarLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quits the program
     *
     * @param evt
     */
    private void quitMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuOptionActionPerformed
        // Quit chatting
        System.exit(0);
    }//GEN-LAST:event_quitMenuOptionActionPerformed
    /**
     * Sends a text message to the server
     *
     * @param evt
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // Object containing all the data to be sent to the server
        ChatMessage m = new ChatMessage(messageTextField.getText(), connection.getSelf().getName());
        try {
            // Sends a raw object over the network to the server
            connection.sendObject(m);
            // clear the message box
            messageTextField.setText("");
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * Sets the username to something else
     *
     * @param evt
     */
    private void changeUsernameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeUsernameMenuItemActionPerformed
        try {
            String newName = JOptionPane.showInputDialog(this, "Please enter your username.");
            System.out.println(newName.equalsIgnoreCase("null"));
            connection.setSelf(new ChatPerson(newName, "online"));
            System.out.println("USERNAME " + connection.getSelf().getName());
            if (connection.getSelf() == null) {
                System.out.println("hi");
                changeUsernameMenuItemActionPerformed(evt);
            }
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeUsernameMenuItemActionPerformed
    /**
     * Swaps to another server to chat on
     *
     * @param evt
     */
    private void changeServerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeServerMenuItemActionPerformed
        try {
            String address = JOptionPane.showInputDialog(this, "Server address:");
            connection.setServer(address, 3191);
            statusBarLabel.setText("Connected to " + connection.getHost() + " as " + connection.getSelf().getName());
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeServerMenuItemActionPerformed
    /**
     * send the message if they hit enter
     *
     * @param evt
     */
    private void messageTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyTyped
        if (evt.getKeyChar() == '\n') {
            sendButtonActionPerformed(null);
        }
    }//GEN-LAST:event_messageTextFieldKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem changeServerMenuItem;
    private javax.swing.JMenuItem changeUsernameMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mainTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JMenuItem quitMenuOption;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel statusBarLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * reacts to various messages from the server, including people joining or
     * leaving the chat room and people sending messages
     *
     * @param o
     * @param arg
     */
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof ChatConnection) {
            if (arg instanceof ChatMessage) {
                // Display the message. It's from another user.
                mainTextArea.append(((ChatMessage) arg).getSender() + ": " + ((ChatMessage) arg).getMessage() + "\n");
                mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
                log.messageReceived((ChatMessage) arg);
            } else if (arg instanceof ChatPerson) {
                // Someone joined the room.
                System.out.println(((ChatPerson) arg).getName());
                // Notify us of user connection. TODO Also add user to list
                mainTextArea.append(((ChatPerson) arg).getName() + " has entered\n");
                mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
                log.personLoggedIn((ChatPerson) arg);
                list.addPerson((ChatPerson) arg);
            } else if (arg instanceof ServerMessage) {
                // Message from server. Display special message depending on contents.
                ServerMessage message = (ServerMessage) arg;
                processMessage(message);
                log.serverMessageReceived((ServerMessage) arg);
            }
        }
    }

    /**
     * Connects to the server. By default localhost
     *
     * @throws UnknownHostException
     * @throws IOException
     */
    private void initConnection() throws UnknownHostException, IOException {
        System.out.println("init connection");
        connection = new ChatConnection("localhost", 3191);
        connection.addObserver(this);
        Thread t = new Thread(connection);
        t.start();
        changeUsernameMenuItemActionPerformed(null);
        statusBarLabel.setText("Connected to " + connection.getHost() + " as " + connection.getSelf().getName());
    }

    private void processMessage(ServerMessage message) {
        if (message.getServerCode() == 1) {
            ChatPerson person = (ChatPerson) message.getData();
            System.out.println(person.getName());
        }
    }
}
